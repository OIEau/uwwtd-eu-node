<?php
require_once(drupal_get_path('module', 'uwwtdeu') . '/includes/uwwtd_map.inc');
require_once(drupal_get_path('module', 'uwwtdeu') . '/includes/uwwtdeu.config.inc');
//require_once(drupal_get_path('module', 'uwwtd') . '/inc/utils.inc');

/**
 * Implements hook_menu().
 */
function uwwtdeu_menu() {
  $items = array();
  
  $items['admin/config/uwwtd'] = array(
    'title' => 'UWWTD',
    'description' => 'Manage uwwtd settings',
    'page callback' => 'uwwtdeu_import_settings',
    'access arguments' => array('administer uwwtdeu'),
    'file' => 'includes/uwwtdeu.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/uwwtd/import/agglomerations'] = array(
    'title' => 'Import UWWTD EU agglomerations',
    'description' => 'Deletes all existing UWWTD EU agglomerations and imports them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uwwtdeu_import_agglomerations_form'),
    'access arguments' => array('administer uwwtdeu'),
    'file' => 'includes/uwwtdeu.import_agglomerations.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/uwwtd/import/ms-levels'] = array(
    'title' => 'Import UWWTD EU member state levels',
    'description' => 'Deletes all existing UWWTD EU member state levels and imports them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uwwtdeu_import_ms_levels_form'),
    'access arguments' => array('administer uwwtdeu'),
    'file' => 'includes/uwwtdeu.import_ms_levels.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/uwwtd/import/nuts2-regions'] = array(
    'title' => 'Import UWWTD EU nuts2 regions',
    'description' => 'Deletes all existing UWWTD EU nuts2 regions and imports them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uwwtdeu_import_nuts2_regions_form'),
    'access arguments' => array('administer uwwtdeu'),
    'file' => 'includes/uwwtdeu.import_nuts2_regions.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['stats/graphs'] = array(
    'title' => 'View Stats',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uwwtdeu_stats_graphs_form'),
    'access callback' => TRUE,
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/uwwtdeu.graphs.inc',
  );
  
 $items['stats/art17'] = array(
    'title' => 'Artilce 17',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uwwtdeu_stats_art17_form'),
    'access callback' => TRUE,
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/uwwtdeu.art17.inc',
  );

	$items['map/europe-list'] = array(
		'title' => t('Europe Map'),
		'description' => t('Europe Map'),
		'page callback' => 'uwwtd_maps_page',
		'page arguments' => array(),
		'access callback' => TRUE,
	);
    $items['map/europe/%'] = array(
		'title' => t('Europe Map'),
		'description' => t('Europe Map'),
		'page callback' => 'uwwtd_map_view_map',
		'page arguments' => array(2),
		'access callback' => TRUE,
	);
    $items['map/europe-debug/%'] = array(
		'title' => t('Europe Map'),
		'description' => t('Europe Map'),
		'page callback' => 'uwwtd_map_display_map',
		'page arguments' => array(2),
		'access callback' => TRUE,
	);
    
  	$items['map/europe/%/generate'] = array(
  		'title' => t('Europe Map'),
  		'description' => t('Europe Map'),
  		'page callback' => 'uwwtd_map_display_map_generate',
  		'page arguments' => array(2),
  		'access arguments' => array('Data-management access'),
  	);
    $items['map/sites/%/%'] = array(
  		'title' => t('Agglomerations'),
  		'description' => t('Agglomeration'),
  		'page callback' => 'uwwtd_map_entities_map',
  		'page arguments' => array(2,3),
  		'access arguments' => true,
  	);
    
  return $items;
}

/**
 * Implements uwwtdeu_node_info().
 */
function uwwtdeu_node_info() {
  $items = array();

  // Add the "agglomeration" content type
  $items['agglomeration'] = array(
    'name' => t('Agglomeration'),
    'base' => 'agglomeration',
    'description' => '',
    'has_title' => 1,
    'title_label' => t('Title'),
    'help' => '',
    'locked' => 1,
  );
  // Add the "ms_level" content type
  $items['ms_level'] = array(
    'name' => t('MS level'),
    'base' => 'ms_level',
    'description' => '',
    'has_title' => 1,
    'title_label' => t('Title'),
    'help' => '',
    'locked' => 1,
  );
  // Add the "nuts2_region" content type
  $items['nuts2_region'] = array(
    'name' => t('Nuts 2 region'),
    'base' => 'nuts2_region',
    'description' => '',
    'has_title' => 1,
    'title_label' => t('Title'),
    'help' => '',
    'locked' => 1,
  );
  drupal_alter('node_info', $items);
  return $items;
}

/**
 * Implement hook_form()
 */
function agglomeration_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implement hook_form()
 */
function ms_level_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implement hook_form()
 */
function nuts2_region_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_permission().
 */
function uwwtdeu_permission() {
  return array(
    'administer uwwtdeu' => array(
      'title' => t('Administer the uwwtdeu site & data'),
    )
  );
}

/**
 *
 */
function uwwtdeu_theme($existing, $type, $theme, $path) {
  return array(
    'europe_map' => array(
      'variables' => array(
        'param' => null,
      ),
      'path' => drupal_get_path('module', 'uwwtdeu') . '/template/',
      'template' => 'europe-map',
    ),
  );         
}

//==================================== MAPS =======================================

function uwwtd_maps_page() {
    global $user;
    $list = [];
    
    foreach($GLOBALS['uwwtd_map']['maps'] as $id=>$map){
        if($map['access'] ||  $user->uid!=0){
            if(!isset($list[$map['map_type']])){
                $list[$map['map_type']]=['children'=>[], 'data'=>$map['map_type']];
            }
            $str = '';
            $uri = 'public://map/'.$id.'.png'; 
            if(file_exists($uri)){
                $str .= '<div class="cell left"><a href="'.url('map/europe/'.$id).'"><img alt="View the map" class="eumap-small-img" src="'.file_create_url($uri).'" /></a></div>';
            }
            $str.= '<div class="cell right"><div>'.l($map['title'], 'map/europe/'.$id).'</div>';
            
            
            //Allow only access if user is logged
            if($user->uid!=0){
                $str.='<div>['.l('png', 'map/europe/'.$id.'/generate').'] ['.l('debug', 'map/europe-debug/'.$id).']</div>';
            }
            $str.='</div>';
            $list[$map['map_type']]['children'][] ='<div class="eu-map-item-wrapper">'.$str.'</div>';
        }
    } 
    
    return theme('item_list', ['items'=>$list, 'title'=>"List of available maps", 'attributes' => ['class'=>['eu-map-list']]]);
}

function uwwtd_map_display_map($wms_layer_name) {
  drupal_add_css(drupal_get_path('module', 'uwwtdeu') . '/css/uwwtd_map.css');
   
   if(isset($GLOBALS['uwwtd_map']['maps'][$wms_layer_name])){
       $map_info = $GLOBALS['uwwtd_map']['maps'][$wms_layer_name];
        return uwwtd_map_render($wms_layer_name, $map_info['map_type'], $map_info['title']);
   }
   else {
       return "This map id is not valid ".$wms_layer_name;
   }
  

}

function uwwtd_map_entities_map($entity_type, $map_type){
    libraries_load('proj4js');
    openlayers_add_js_projection_definition(
      openlayers_get_projection_by_identifier('EPSG:3857')
    );
   
   $map = 'agglomerations';
   
    $output = openlayers_render_map($map);
    
    return $output;
}

function uwwtd_map_view_map($wms_layer_name){
    if(isset($GLOBALS['uwwtd_map']['maps'][$wms_layer_name])){
       $map_info = $GLOBALS['uwwtd_map']['maps'][$wms_layer_name];
       $info = explode('_', $wms_layer_name);
        drupal_set_title($map_info['title']);
        $output ='<h1>'.$map_info['title'].'</h1>';
        $uri = 'public://map/'.$wms_layer_name.'.png'; 
        if(file_exists($uri)){
            $output.= '<div class="eu-map-wrapper"><img class="eumap-img" src="'.file_create_url($uri). '?d=' . date("YmdHis") . '" /></div>';
        }
        
        //Get Keys 
        if($info[2] == 'comp'){
            if($info[1] == 'global'){
                $key_target = 'compliance_target';
                $key_value = 'compliance_compliant';
                $key_rate = 'global_rate';
            }else{
                $key_target = $info[1].'_target';
                $key_value = $info[1].'_compliant';
                $key_rate = $info[1].'_rate';
            }
        }
        elseif($info[2] == 'dtt'){
            $key_target = $info[1].'_target';
            if($info[1]=='art3'){
                $key_rate = 'dtt3_exp_rate';
                $key_value ='dtt3_exp';
            }
            elseif($info[1]=='art4'){
                $key_rate = 'dtt4p_exp_rate';
                $key_value ='dtt4t_exp';
            }
            elseif($info[1]=='art5'){
                $key_value ='dtt5t_exp';
                $key_rate = 'dtt5p_exp_rate';
            }
        }
        
        //Get Data 
        $table = [];
        if($info[0] == 'mslevel'){
            $data = uwwtd_map_get_mslevel_data($report='10th');
            if(!empty($data)){
                foreach($data as $cc=>$item){
                    if($info[2] == 'dtt'){
                        $table[] = [
                            'Country'=>strtoupper($item['cc']),
                            'Total generated load'=>uwwtdeu_format_number($item['generatedload']),
                            //'Connected load'=>uwwtdeu_format_number($item['connectedload']),
                            'Targeted load'=>uwwtdeu_format_number($item[$key_target]),
                            'Distance'=>uwwtdeu_format_number($item[$key_value]),
                            'Rate'=>uwwtdeu_format_pcnumber($item[$key_rate]),
                        ];
                    }
                    else{
                        $table[] = [
                            'Country'=>strtoupper($item['cc']),
                            'Total generated load'=>uwwtdeu_format_number($item['generatedload']),
                            //'Connected load'=>uwwtdeu_format_number($item['connectedload']),
                            'Targeted load'=>uwwtdeu_format_number($item[$key_target]),
                            'Compliant load'=>uwwtdeu_format_number($item[$key_value]),
                            'Rate'=>uwwtdeu_format_pcnumber($item[$key_rate]),
                        ];
                    }
                }
            }
        }
        elseif($info[0] == 'nuts2level'){
            $data = uwwtd_map_get_nuts2level_data($report='10th');
            if(!empty($data)){
                foreach($data as $cc=>$item){
                    if($info[2] == 'dtt'){
                        $table[] = [
                            'Country'=>'<b>'.strtoupper($item['cc']).'</b>',
                            'NUTS 2'=>'<b>'.strtoupper($item['nuts_id']).'</b> - '.$item['nuts_name'],
                            'Total generated load'=>uwwtdeu_format_number($item['generatedload']),
                            //'Connected load'=>uwwtdeu_format_number($item['connectedload']),
                            'Targeted load'=>uwwtdeu_format_number($item[$key_target]),
                            'Distance'=>uwwtdeu_format_number($item[$key_value]),
                            'Rate'=>'<b>'.uwwtdeu_format_pcnumber($item[$key_rate]).'</b>',
                        ];
                    }else{
                        $table[] = [
                            'Country'=>'<b>'.strtoupper($item['cc']).'</b>',
                            'NUTS 2'=>'<b>'.strtoupper($item['nuts_id']).'</b> - '.$item['nuts_name'],
                            'Total generated load'=>uwwtdeu_format_number($item['generatedload']),
                            //'Connected load'=>uwwtdeu_format_number($item['connectedload']),
                            'Targeted load'=>uwwtdeu_format_number($item[$key_target]),
                            'Compliant load'=>uwwtdeu_format_number($item[$key_value]),
                            'Rate'=>'<b>'.uwwtdeu_format_pcnumber($item[$key_rate]).'</b>',
                        ];
                    }
                    
                }
            }
        }
        elseif($info[0] == 'rbdlevel'){
            $data = uwwtd_map_get_rbdlevel_data($report='10th');
            if(!empty($data)){
                foreach($data as $cc=>$item){
                    if($info[2] == 'dtt'){
                        $table[] = [
                            'Country'=>'<b>'.strtoupper($item['cc']).'</b>',
                            'RBD'=>'<b>'.strtoupper($item['rbd']) .'</b> - '. $item['nametxtint'],
                            'Total generated load'=>uwwtdeu_format_number($item['generatedload']),
                            //'Connected load'=>uwwtdeu_format_number($item['connectedload']),
                            'Targeted load'=>uwwtdeu_format_number($item[$key_target]),
                            'Distance'=>uwwtdeu_format_number($item[$key_value]),
                            'Rate'=>'<b>'.uwwtdeu_format_pcnumber($item[$key_rate]).'</b>',
                        ];
                    }
                    else{
                        $table[] = [
                            'Country'=>'<b>'.strtoupper($item['cc']).'</b>',
                            'RBD'=>'<b>'.strtoupper($item['rbd']) .'</b> - '. $item['nametxtint'],
                            'Total generated load'=>uwwtdeu_format_number($item['generatedload']),
                            //'Connected load'=>uwwtdeu_format_number($item['connectedload']),
                            'Targeted load'=>uwwtdeu_format_number($item[$key_target]),
                            'Compliant load'=>uwwtdeu_format_number($item[$key_value]),
                            'Rate'=>'<b>'.uwwtdeu_format_pcnumber($item[$key_rate]).'</b>',
                        ];
                    }
                }
            }
        }
        if(!empty($table))  {
            $output.='<div class="eu-map-data-wrapper">'.theme('table', ['header'=>array_keys($table[0]), 'rows'=>$table, 'sticky'=>true]).'</div>';
        }
        return $output; 
   }
   else {
       return "This map id is not valid ".$wms_layer_name;
   }
}

function uwwtd_map_render($wms_layer_name, $map_type, $title){
   
    libraries_load('proj4js');
    openlayers_add_js_projection_definition(
      openlayers_get_projection_by_identifier('EPSG:3857')
    );
   
  $preset = openlayers_preset_load($GLOBALS['uwwtd_map']['europe']['main_map']);
  $main_map =  uwwtd_map_openlayers_build_map($preset->data, $wms_layer_name);
  $main_output =theme('openlayers_map', array(
      'map' => $main_map,
      'map_name' => $GLOBALS['uwwtd_map']['europe']['main_map']
    ));
    $js = array('openlayers' => array('maps' => array($main_map['id'] => $main_map)));
  $group = '';
  foreach ($GLOBALS['uwwtd_map']['europe']['list_minimap'] as $key => $list_map) {
  if(isset($_GET['COUNTRY'])){
         $key.='-cc';
  }
      
    $group .= '<div class="'.$key.'">';
    $group .= '<div class="'.$key.'-inner">';
    foreach ($list_map as $map_config) {
        $preset = openlayers_preset_load($map_config['map_name']);
        if($map_config['map_name'] =='malta'){
            $preset->data['center']['initial']['centerpoint'] = '14.37, 35.95';
        }
        elseif($map_config['map_name'] =='reunion'){
            $preset->data['center']['initial']['centerpoint'] = '55.54687498286358, -21.13';
        }
        elseif($map_config['map_name'] =='martinique'){
            $preset->data['center']['initial']['centerpoint'] = '-60.920312496292004, 14.604847159448763';
        }
        elseif($map_config['map_name'] =='acore'){
            $preset->data['center']['initial']['centerpoint'] = '-27.141875002274543, 38.27268853578907'; 
        }
        elseif($map_config['map_name'] =='canariass'){
            $preset->data['center']['initial']['centerpoint'] = '-15.820312504352689, 28.4043806846327';
        }
        
      $mini_map = uwwtd_map_openlayers_build_map($preset->data, $wms_layer_name);
      $js['openlayers']['maps'][$mini_map['id']]= $mini_map;
      
      $mini_class='mini-map';
      $group .=  '
      <div class="'.$mini_class.' '.$mini_map->name.' '.$map_config['class'].'">
         <div class="minimap-title">'.$map_config['title'].'</div>
      '
       . theme('openlayers_map', array(
      'map' => $mini_map,
      'map_name' => $map_config['map_name']
    )). '</div>';
    }
    $group .= '</div>';
    $group .= '</div>';
  }
  
  drupal_add_js($js, 'setting');
  
  //==================TODO legend
   return theme(
        'europe_map', 
        array(
            'param' => array( 
                'main_output' => $main_output,
                'group' => $group,
                'title'=>$title,
                'legend'=>uwwtd_map_getLegend($map_type)
            )
        )
    ); 
}

function uwwtd_map_getLegend($map_type){
    $output = '';
    if(isset($GLOBALS['uwwtd_map']['legend'][$map_type])){
        $legend = $GLOBALS['uwwtd_map']['legend'][$map_type];
        foreach($legend as $col){
            $col_str ='';
            if($col['title']!=''){$col_str.='<h3>'.$col['title'].'</h3>';}
            foreach($col['items'] as $item){
                if(isset($item['color'])){
                        $col_str.='<div class="legend-item"><div class="legend-item-color" style="background-color:'.$item['color'].';"></div><div class="legend-item-label">'.$item['label'].'</div></div>';
                    }
                else{
                    $col_str.='<div class="legend-item"><i>'.$item['label'].'</i></div>';
                }
            }
            $output.= '<div class="legend-cols">'.$col_str.'</div>';
        }
    }
    return '<div class="legend-container">'.$output.'</div>';
}

function uwwtd_map_display_map_generate($wms_layer_name) {
//   return 'ok';
  $uri = 'public://map/'.$wms_layer_name.'.png'; 
  $url_source = url('map/europe-debug/'.$wms_layer_name, ['absolute'=>true]);

  $target_file = escapeshellarg(drupal_realpath($uri));
          
//   $command = "/opt/wkhtmltox.0.12.4/bin/wkhtmltoimage --crop-y 10 --crop-w 700 --crop-h 1170 --javascript-delay 5000  '" . $url_source  . "' " . $target_file;
  $command = str_replace(array('[#SOURCE#]','[#TARGET#]'), array($url_source, $target_file), $GLOBALS['uwwtd_map']['europe']['wkhtmlpath_command']);
  $result = system($command, $return_var);  
// dsm($return_var); 
// dsm($result);  

  $markup = '<img src="'.file_create_url($uri). '?d=' . date("YmdHis") . '" />';

  return [
    '#type' => 'markup',
    '#markup' => $markup,
  ];
}



function uwwtd_map_openlayers_build_map($map = array(), $wms_layer_name) {
  // Get the necessary parts
  openlayers_include();
  module_load_include('inc', 'openlayers', 'includes/openlayers.render');

  // If no map is specified, use the default map.
  if (empty($map)) {
    if ($loaded_map = openlayers_map_load(
      variable_get('openlayers_default_map', 'default'))) {
      $map = $loaded_map->data;
    }
  }

  // Create ID for map as this will help with alters.
  $map['id'] = !isset($map['id']) ?
    _openlayers_create_map_id() : $map['id'];

  // Hook to alter map before main processing.  Styles, behaviors,
  // layers may all be added here.
  // hook_openlayers_map_preprocess_alter($map)
  drupal_alter('openlayers_map_preprocess', $map);

  // Styles and layer styles are not required parameters
  $map['styles'] = isset($map['styles']) ? $map['styles'] : array();
  $map['layer_styles'] = isset($map['layer_styles']) ? $map['layer_styles'] : array();
  $map['layer_styles_select'] = isset($map['layer_styles_select']) ? $map['layer_styles_select'] : array();
  $map['layer_styles_temporary'] = isset($map['layer_styles_temporary']) ? $map['layer_styles_temporary'] : array();

  // Process map parts.
  $map['layers'] = _uwwtd_map_openlayers_layers_process($map['layers'], $map, $wms_layer_name);
  if($wms_layer_name=='nuts2level_global_comp_10th_by_cc' || $wms_layer_name=='nuts2level_global_comp_10th_by_cc_mono'){
      $map['layers']['uwwtd_eu_generic']['params']['singleTile'] = 1;
      $map['layers']['uwwtd_eu_generic']['options']['COUNTRY'] = $_GET['COUNTRY'];
  }
  
  $map['behaviors'] = _openlayers_behaviors_render($map['behaviors'], $map);
  $map['styles'] = _openlayers_styles_process($map['styles'], $map['layer_styles'], $map['layer_styles_select'], $map['layer_styles_temporary'], $map);

  // Restrict map to its projection extent (data outwith cannot be represented).
  // Layer can additionally specfiy their maxExtent in case they use
  // non-default grids.
  $projection = openlayers_get_projection_by_identifier($map['projection']);
  $map['maxExtent'] = $projection->getProjectedExtent();

  // In case the layer offers the same projection as the map, use this and do not provide
  // projection definition to client. Otherwise rely on the client to reproject on the fly.
  foreach ($map['layers'] as $layer_name => $layer) {
    if(in_array($map['projection'], $layer['projection'])){
      $map['layers'][$layer_name]['projection'] = $map['projection'];
    } else {
      // Client is able to reproject any possible projection because their definitions need to be
      // known to be able to set up a layer with a certain projection. Thus choice does not matter.
      $layerProjectionIdentifier = reset($layer['projection']);
      if($layerProjectionIdentifier===FALSE){
        throw new Exception(
          t('Layer !title lacks its projection. Please edit it to select a projection.', array(
            '!title' => $layer['title']
          ))
        );
      }
      $map['layers'][$layer_name]['projection'] = $layerProjectionIdentifier;
    }

    // Ensure JavaScript gets proper type.
    $map['layers'][$layer_name]['isBaseLayer'] = (boolean)($layer['isBaseLayer']);
  }

  // Hook to alter map one last time.  Final modification to existing
  // styles, behaviors, layers can happen here, but adding new styles,
  // behaviors will not get rendered.
  // hook_openlayers_map_alter($map)
  drupal_alter('openlayers_map', $map);

  // Check map for errors
  $map['errors'] = openlayers_error_check_map($map);
  return $map;
}


/**
 * Initialize the layer array into an indexed array of layer objects
 *
 * @param $layers
 *   Array of layers to process
 * @param $map
 *   Map array
 * @return $layer_data
 *   Array of initialized layer objects
 */
function _uwwtd_map_openlayers_layers_process($layers = array(), &$map = array(), $wms_layer_name) {
  $layer_data = array();

  // Load Layers and assign weights
  foreach ($layers as $key => $layer) {
    if ($layer_object = openlayers_layer_load($layer)) {
      if($key == 'uwwtd_eu_generic') {
        $layer_object->data['options']['layers'][0] = $wms_layer_name;
      }
      $layers[$key] = $layer_object;
      if (!empty($map['layer_weight'][$key])) {
        $layers[$key]->weight = $map['layer_weight'][$key];
      }
      else $layers[$key]->weight = 0;
    }
    else unset($layers[$key]);
  }

  // Sort layers
  usort($layers, '_openlayers_layers_process_sort');

  // Process into array-based layer data for the map
  foreach ($layers as $type => $layer_object) {
    if (is_object($layer_object)) {
      $layer_object->render($map);
      $layer_object->data['title'] = $layer_object->title;
      $layer_object->data['weight'] = $layer_object->weight;
      $layer_data[$layer_object->name] = $layer_object->data;
    }
  }
  return $layer_data;
}

function uwwtd_map_get_mslevel_data($report='10th'){
    $data = [];
    
    $result = db_query("
        SELECT 
            r.cc,
            r.generatedload,r.connectedload,
            r.compliance_target,r.compliance_compliant, CASE WHEN r.cc='hr' THEN -2  WHEN compliance_target > 0 THEN round((compliance_compliant/compliance_target)*100, 1) ELSE -1 END AS global_rate,
            r.art3_target,r.art3_compliant, CASE WHEN r.cc='hr' THEN -2  WHEN art3_target > 0 THEN round((art3_compliant/art3_target)*100, 1) ELSE -1 END AS art3_rate,
            r.art4_target,r.art4_compliant, CASE WHEN r.cc='hr' THEN -2  WHEN art4_target > 0 THEN round((art4_compliant/art4_target)*100, 1) ELSE -1 END AS art4_rate,
            r.art5_target,r.art5_compliant, CASE  WHEN r.cc='hr' THEN -2  WHEN art5_target > 0 THEN round((art5_compliant/art5_target)*100, 1) ELSE -1 END AS art5_rate,
            r.art6_target,r.art6_compliant, CASE WHEN art6_target > 0 THEN round((art6_compliant/art6_target)*100, 1) ELSE -1 END AS art6_rate,
            r.dtt3_pd,r.dtt3_exp, CASE WHEN r.cc='hr' THEN -2  WHEN art3_target > 0 THEN round((r.dtt3_exp/r.art3_target)*100, 1) ELSE -1 END AS dtt3_exp_rate,
            r.dtt4t_pd,r.dtt4t_exp,r.dtt4p_pd,r.dtt4p_exp, CASE WHEN r.cc='hr' THEN -2  WHEN art4_target > 0 THEN round((r.dtt4t_exp/r.art4_target)*100,1) ELSE -1 END AS dtt4t_exp_rate, CASE WHEN r.cc='hr' THEN -2  WHEN art4_target > 0 THEN round((r.dtt4p_exp/r.art4_target)*100,1) ELSE -1 END AS dtt4p_exp_rate,
            r.dtt5t_pd,r.dtt5t_exp,r.dtt5p_pd,r.dtt5p_exp, CASE WHEN r.cc='hr' THEN -2  WHEN art5_target > 0 THEN round((r.dtt5t_exp/r.art5_target)*100,1) ELSE -1 END AS dtt5t_exp_rate, CASE WHEN r.cc='hr' THEN -2  WHEN art5_target > 0 THEN round((r.dtt5p_exp/r.art5_target)*100,1) ELSE -1 END AS dtt5p_exp_rate
        FROM calcul.cc_stat_art_".$report." r
    ");
    while ($record = $result->fetchAssoc()) {
        $data[$record['cc']] = $record;
    }
    return $data;
}
function uwwtd_map_get_nuts2level_data($report='10th'){
    $data = [];
    
    $result = db_query("
        SELECT 
            geo.cc, geo.gid, geo.nuts_id,nuts_name,
            r.generatedload,r.connectedload,
            r.compliance_target,r.compliance_compliant,
            r.art3_target,r.art3_compliant, CASE WHEN cc='HR' THEN -2  WHEN cc='RO' THEN -3 WHEN art3_target > 0 THEN round((art3_compliant/art3_target)*100, 1) ELSE -1 END AS art3_rate,
            r.art4_target,r.art4_compliant, CASE WHEN cc='HR' THEN -2  WHEN cc='RO' THEN -3 WHEN art4_target > 0 THEN round((art4_compliant/art4_target)*100, 1) ELSE -1 END AS art4_rate,
            r.art5_target,r.art5_compliant, CASE WHEN cc='HR' THEN -2  WHEN cc='RO' THEN -3 WHEN art5_target > 0 THEN round((art5_compliant/art5_target)*100, 1) ELSE -1 END AS art5_rate,
            r.art6_target,r.art6_compliant, CASE WHEN cc='HR' THEN -2  WHEN cc='RO' THEN -3 WHEN art6_target > 0 THEN round((art6_compliant/art6_target)*100, 1) ELSE -1 END AS art6_rate,
            r.dtt3_pd,r.dtt3_exp, CASE WHEN cc='HR' THEN -2  WHEN cc='RO' THEN 26 WHEN art3_target > 0 THEN round((r.dtt3_exp/r.art3_target)*100, 1) ELSE -1 END AS dtt3_exp_rate,
            r.dtt4t_pd,r.dtt4t_exp,r.dtt4p_pd,r.dtt4p_exp, CASE WHEN cc='HR' THEN -2  WHEN cc='RO' THEN 50 WHEN art4_target > 0 THEN round((r.dtt4t_exp/r.art4_target)*100,1) ELSE -1 END AS dtt4t_exp_rate, CASE WHEN cc='HR' THEN -2  WHEN cc='RO' THEN 50 WHEN art4_target > 0 THEN round((r.dtt4p_exp/r.art4_target)*100,1) ELSE -1 END AS dtt4p_exp_rate,
            r.dtt5t_pd,r.dtt5t_exp,r.dtt5p_pd,r.dtt5p_exp, CASE WHEN cc='HR' THEN -2  WHEN cc='RO' THEN 65 WHEN art5_target > 0 THEN round((r.dtt5t_exp/r.art5_target)*100,1) ELSE -1 END AS dtt5t_exp_rate, CASE WHEN cc='HR' THEN -2  WHEN cc='RO' THEN 65 WHEN art5_target > 0 THEN round((r.dtt5p_exp/r.art5_target)*100,1) ELSE -1 END AS dtt5p_exp_rate
        FROM data.nuts_2_v2016 geo
            LEFT JOIN calcul.nuts2_stat_art_10th r  ON r.nuts2=geo.nuts_id
        WHERE geo.cc IN ('IT','AT','BE','BG','CY','CZ','DE','DK','EE','ES','FI','FR','EL','IE','LU','HR','HU','LT','LV','MT','NL','PL','PT','RO','SK','SI','SE','UK')
        ORDER BY geo.cc, geo.nuts_id
    ");
    while ($record = $result->fetchAssoc()) {
        $data[$record['nuts_id']] = $record;
    }
    return $data;
}
function uwwtd_map_get_rbdlevel_data($report='10th'){
    $data = [];
    
    $result = db_query("
        SELECT 
            geo.country as cc, r.rbd, nametxtint,
            geo.gid, geo.thematicid,
            r.generatedload,r.connectedload,
            r.compliance_target,r.compliance_compliant,
            r.art3_target,r.art3_compliant, CASE  WHEN country='HR' THEN -2  WHEN country='RO' THEN -3 WHEN art3_target > 0 THEN round((art3_compliant/art3_target)*100, 1) ELSE -1 END AS art3_rate,
            r.art4_target,r.art4_compliant, CASE WHEN country='HR' THEN -2  WHEN country='RO' THEN -3  WHEN art4_target > 0 THEN round((art4_compliant/art4_target)*100, 1) ELSE -1 END AS art4_rate,
            r.art5_target,r.art5_compliant, CASE WHEN country='HR' THEN -2  WHEN country='RO' THEN -3  WHEN art5_target > 0 THEN round((art5_compliant/art5_target)*100, 1) ELSE -1 END AS art5_rate,
            r.art6_target,r.art6_compliant, CASE WHEN country='HR' THEN -2  WHEN country='RO' THEN -3  WHEN art6_target > 0 THEN round((art6_compliant/art6_target)*100, 1) ELSE -1 END AS art6_rate,
            r.dtt3_pd,r.dtt3_exp, CASE  WHEN country='HR' THEN -2  WHEN country='RO' THEN -3 WHEN art3_target > 0 THEN round((r.dtt3_exp/r.art3_target)*100, 1) ELSE -1 END AS dtt3_exp_rate,
            r.dtt4t_pd,r.dtt4t_exp,r.dtt4p_pd,r.dtt4p_exp, CASE  WHEN country='HR' THEN -2  WHEN country='RO' THEN -3 WHEN art4_target > 0 THEN round((r.dtt4t_exp/r.art4_target)*100,1) ELSE -1 END AS dtt4t_exp_rate, CASE  WHEN country='HR' THEN -2  WHEN country='RO' THEN -3 WHEN art4_target > 0 THEN round((r.dtt4p_exp/r.art4_target)*100,1) ELSE -1 END AS dtt4p_exp_rate,
            r.dtt5t_pd,r.dtt5t_exp,r.dtt5p_pd,r.dtt5p_exp, CASE  WHEN country='HR' THEN -2  WHEN country='RO' THEN -3 WHEN art5_target > 0 THEN round((r.dtt5t_exp/r.art5_target)*100,1) ELSE -1 END AS dtt5t_exp_rate, CASE  WHEN country='HR' THEN -2  WHEN country='RO' THEN -3 WHEN art5_target > 0 THEN round((r.dtt5p_exp/r.art5_target)*100,1) ELSE -1 END AS dtt5p_exp_rate
        FROM data.rbd_v2016 geo
            LEFT JOIN calcul.rbd_stat_art_10th r  ON r.rbd=geo.thematicid
        WHERE geo.country IN ('IT','AT','BE','BG','CY','CZ','DE','DK','EE','ES','FI','FR','EL','IE','LU','HR','HU','LT','LV','MT','NL','PL','PT','RO','SK','SI','SE','UK')
        ORDER BY cc, r.rbd
    ");
    while ($record = $result->fetchAssoc()) {
        $data[$record['rbd']] = $record;
    }
    return $data;
}


function uwwtdeu_wms_getfeatureinfo_alter(&$result, &$url){
    foreach($result as $layer=>$features){
        if($url['host']=='maps.oieau.fr'){
            if($layer =='agglomeration_global_comp_10th'){
                $new_layer =t("Agglomerations");
                $keys = array("cc","aggcode","aggname","generatedload","globalcompliance");
                foreach($features as $feature){
                    $item =array_intersect_key($feature, array_flip($keys));
                    if($item['cc']=='el') $item['cc'] = 'gr';
                    if($item['cc'] == 'lu' ) {
                        $url = 'https://dev.oieau.fr/uwwtd_'.$item['cc'].'/agglomeration/'.str_replace('_', '', strtolower($item['aggcode'])).'/2016';
                    }
                    else{
                        $url = 'https://dev.oieau.fr/uwwtd_'.$item['cc'].'/agglomeration/'.strtolower($item['aggcode']).'/2016';
                    }
                    
                    $item['aggcode'] = l($item['aggcode'], $url);
                    $data[] = $item;
                }
                $result[$new_layer] = $data;
                unset($result[$layer]);
            }
        }
    }
}


/**
 * Duplicated uwwtd helper methods.
 */
function uwwtdeu_format_number($number, $precision = 0){
  if ($number === '-') {
    return $number;
  }
  return number_format($number, $precision, '.', ' ');
}
function uwwtdeu_format_pcnumber($number, $precision = 0){
  if ($number === '-') {
    return $number;
  }
  elseif ($number == -2 ) {
    return t('Pending deadline');
  }
  elseif ($number == -1 ) {
    return t('No data');
  }
  elseif ($number == -3 ) {
    return t('Whole territory only');
  }
  return number_format($number, $precision, '.', ' ').' %';
}
function uwwtdeu_format_decimal($number, $precision = 1)
{
  return number_format($number, $precision, '.', ' ');
}

function uwwtdeu_get_national_stat_str($year){
  return '';
//  module_load_include('inc','uwwtd','inc/pages');
//  $option['field_anneedata_value'] = $year;
//  $dataUwwtp = uwwtd_get_data_uwwtp($option);
//  $dataAggl = uwwtd_get_data_agglomeration($option);
//
//  $nbGeneratedLoad = 0;
//  $nbCollectingSystem = 0;
//  $nbPrimaryTreatement = 0;
//  $nbSecondaryTreatement = 0;
//  $nbOtherTreatement = 0;
//  $nbPhysicalCapacity = 0;
//  $nbIAS = 0;
//  foreach($dataAggl as $agglo){
//    $nbGeneratedLoad = $agglo['field_agggenerated_value']+ $nbGeneratedLoad;
//    $aggloCollectingSystem = ($agglo['field_aggc1_value'] /100) * $agglo['field_agggenerated_value'];
//    $nbCollectingSystem = $aggloCollectingSystem + $nbCollectingSystem;
//
//    $aggloIAS = ($agglo['field_aggc2_value'] /100) * $agglo['field_agggenerated_value'];
//    $nbIAS = $aggloIAS + $nbIAS;
//  }
//
//  foreach($dataUwwtp as $uwwtp){
//    // dsm($uwwtp);
//    if($uwwtp['field_uwwtreatmenttype_value'] == "P"){
//      $nbPrimaryTreatement = $nbPrimaryTreatement+1;
//    }elseif($uwwtp['field_uwwtreatmenttype_value'] == "S"){
//      $nbSecondaryTreatement = $nbSecondaryTreatement +1;
//    }elseif($uwwtp['field_uwwtreatmenttype_value'] == "MS"){
//      $nbOtherTreatement = $nbOtherTreatement+1;
//    }
//    $nbPhysicalCapacity = $uwwtp['field_physicalcapacityactivity_value']+ $nbPhysicalCapacity;
//  }
//  $nbCollectingSystem = $nbCollectingSystem *100 / $nbGeneratedLoad;
//  $totalCollectingSystem= number_format($nbCollectingSystem, 0, ".", " ");
//  $nbIAS =$nbIAS *100 / $nbGeneratedLoad;
//  $totalIAS = number_format($nbIAS, 0, ".", " ");
//
//  $annee = $option['field_anneedata_value'];
//  $nbUrban = count($dataAggl);
//  $nbGeneratedLoad = number_format($nbGeneratedLoad, 0, ".", " ");
//  $nbPhysicalCapacity = number_format($nbPhysicalCapacity, 0, ".", " ");
//
//  return  "In ".$annee.", ".variable_get('siif_eru_country_name')." had ".$nbUrban." urban waste water agglomerations of more then 2 000 population equivalent (p.e).
//			These agglomerations generated a total load of ".$nbGeneratedLoad." p.e. ".$totalCollectingSystem." % of this load is connected to collecting systems and ".$totalIAS." %
//			addressed through Individual and Appropriate Systems (storage or septic tanks, micro-stations,...). These agglomerations are
//			connected to ".$nbPrimaryTreatement." primary treatment plant, ".$nbSecondaryTreatement." secondary treatment plants and ".$nbOtherTreatement." more stringent treatment plants.
//			All these treatment plants have a total design capacity of ".$nbPhysicalCapacity. " p.e. ";
}

function uwwtdeu_get_cache_key_agglomeration($option)
{
  return 'eu_data_agglomeration_' . $option['field_anneedata_value'];
}
function uwwtdeu_get_cache_key_sensitive_area($option)
{
  return 'eu_data_sensitive_area_' . $option['field_anneedata_value'];
}

function uwwtdeu_get_cache_key_uwwtp($option)
{
  return 'eu_data_uwwtp_' . $option['field_anneedata_value'];
}

function uwwtdeu_get_cache_key_dcp($option)
{
  return 'eu_data_dcp_' . $option['field_anneedata_value'];
}

function uwwtdeu_get_cache_key_block_home()
{
  return 'eu_data_block_map_home';
}

function uwwtdeu_is_user_anonymous()
{
  global $user;
  return ($user->uid == 0);
}

function uwwtdeu_get_cache_key_page_agglo_compliance($option)
{
  return 'eu_page_agglomeration_compliance_' . $option['field_anneedata_value'];
}
function uwwtdeu_get_cache_key_page_sensitive_area($option)
{
  return 'eu_page_sensitive_area_' . $option['field_anneedata_value'];
}
function uwwtdeu_get_cache_key_page_dcp($option)
{
  return 'eu_page_dcp_' . $option['field_anneedata_value'];
}

function uwwtdeu_get_cache_key_page_agglo_treatment($option)
{
  return 'eu_page_agglomeration_treatment_' . $option['field_anneedata_value'];
}

function uwwtdeu_get_cache_key_page_uwwtp_treatment($option)
{
  return 'eu_page_uwwtp_treatment_' . $option['field_anneedata_value'];
}

function uwwtdeu_get_cache_key_page_uwwtp_compliance($option)
{
  return 'eu_page_uwwtp_compliance_' . $option['field_anneedata_value'];
}

function uwwtdeu_get_cache_key_page_uwwtp_pressure($option)
{
  return 'eu_page_uwwtp_pressure_' . $option['field_anneedata_value'];
}